"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5803],{6e3:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"how-it-works/synchronization-process","title":"Synchronization Process","description":"The synchronization process is split into two main commands:","source":"@site/docs/how-it-works/synchronization-process.md","sourceDirName":"how-it-works","slug":"/how-it-works/synchronization-process","permalink":"/docs/how-it-works/synchronization-process","draft":false,"unlisted":false,"editUrl":"https://github.com/directus-sync/directus-sync/tree/main/website/docs/how-it-works/synchronization-process.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docs","previous":{"title":"Ids Mapping and Tracking","permalink":"/docs/how-it-works/id-mapping"},"next":{"title":"Schema Management","permalink":"/docs/how-it-works/schema-management"}}');var s=t(4848),i=t(3023);const c={sidebar_position:2},r="Synchronization Process",a={},l=[{value:"Command Lifecycle",id:"command-lifecycle",level:2},{value:"Pull Command",id:"pull-command",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"synchronization-process",children:"Synchronization Process"})}),"\n",(0,s.jsx)(n.p,{children:"The synchronization process is split into two main commands:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"diff"}),": This command performs a comparison between the local JSON files generated by ",(0,s.jsx)(n.code,{children:"pull"})," and the current state of a Directus instance. It outlines the elements that need to be created, updated, or deleted to achieve synchronization."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"push"}),": This command executes the actual synchronization plan, applying the necessary changes to the Directus instance. It handles dependencies and circular dependencies carefully by potentially running the synchronization process multiple times until the Directus instance is fully in sync with the JSON definitions."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"command-lifecycle",children:"Command Lifecycle"}),"\n",(0,s.jsx)(n.h3,{id:"pull-command",children:"Pull Command"}),"\n",(0,s.jsx)(n.mermaid,{value:"flowchart\nsubgraph Pull[Get elements - for each collection]\ndirection TB\nB[Create query for all elements]\n--\x3e|onQuery hook|C[Add collection-specific filters]\n--\x3e D[Get elements from Directus]\n--\x3e E[Get or create SyncId for each element. Start tracking]\n--\x3e F[Remove original Id of each element]\n--\x3e|onDump hook|G[Keep elements in memory]\nend\nsubgraph Post[Link elements - for each collection]\ndirection TB\nH[Get all elements from memory]\n--\x3e I[Replace relations ids by SyncIds]\n--\x3e J[Remove ignore fields]\n--\x3e K[Sort elements]\n--\x3e|onSave hook|L[Save to JSON file]\nend\nA[Pull command] --\x3e Pull --\x3e Post --\x3e Z[End]"})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},3023:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var o=t(6540);const s={},i=o.createContext(s);function c(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);